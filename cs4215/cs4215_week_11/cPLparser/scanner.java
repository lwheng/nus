/* The following code was generated by JFlex 1.4.3 on 4/5/11 2:45 PM */

/* JFlex example: part of Java 1.0/1.1 language lexer specification */

package cPLparser;

import cPL.*;
import java_cup.runtime.*;

/**
 * This class is a scanner generated by <a href="http://www.jflex.de/">JFlex</a>
 * 1.4.3 on 4/5/11 2:45 PM from the specification file <tt>scanner.flex</tt>
 */
class scanner implements java_cup.runtime.Scanner {

	/** This character denotes the end of file */
	public static final int YYEOF = -1;

	/** initial size of the lookahead buffer */
	private static final int ZZ_BUFFERSIZE = 16384;

	/** lexical states */
	public static final int STRING = 2;
	public static final int YYINITIAL = 0;

	/**
	 * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
	 * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l at the
	 * beginning of a line l is of the form l = 2*k, k a non negative integer
	 */
	private static final int ZZ_LEXSTATE[] = { 0, 0, 0, 0 };

	/**
	 * Translates characters to character classes
	 */
	private static final String ZZ_CMAP_PACKED = "\11\7\1\3\1\2\1\0\1\3\1\1\16\7\4\0\1\3\3\0"
			+ "\1\7\1\0\1\30\1\10\1\25\1\26\1\5\1\27\1\46\1\12"
			+ "\1\47\1\4\1\13\11\14\1\45\1\56\1\34\1\33\1\24\2\0"
			+ "\32\11\1\43\1\32\1\44\1\0\1\7\1\0\1\42\1\6\1\23"
			+ "\1\21\1\20\1\15\1\55\1\37\1\35\2\6\1\40\1\50\1\17"
			+ "\1\53\1\51\1\6\1\22\1\41\1\36\1\16\1\6\1\54\1\57"
			+ "\1\52\1\6\1\0\1\31\2\0\41\7\2\0\4\7\4\0\1\6"
			+ "\2\0\1\7\7\0\1\6\4\0\1\6\5\0\27\11\1\0\7\11"
			+ "\30\6\1\0\10\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"
			+ "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"
			+ "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"
			+ "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"
			+ "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"
			+ "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\2\6\1\11"
			+ "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"
			+ "\1\6\1\11\1\6\1\11\2\6\1\11\1\6\1\11\1\6\1\11"
			+ "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"
			+ "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"
			+ "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"
			+ "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"
			+ "\1\6\2\11\1\6\1\11\1\6\1\11\3\6\2\11\1\6\1\11"
			+ "\1\6\2\11\1\6\3\11\2\6\4\11\1\6\2\11\1\6\3\11"
			+ "\3\6\2\11\1\6\2\11\1\6\1\11\1\6\1\11\1\6\2\11"
			+ "\1\6\1\11\2\6\1\11\1\6\2\11\1\6\3\11\1\6\1\11"
			+ "\1\6\2\11\2\6\1\7\1\11\3\6\4\7\1\11\1\7\1\6"
			+ "\1\11\1\7\1\6\1\11\1\7\1\6\1\11\1\6\1\11\1\6"
			+ "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"
			+ "\1\11\2\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"
			+ "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\2\6"
			+ "\1\11\1\7\1\6\1\11\1\6\3\11\1\6\1\11\1\6\1\11"
			+ "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"
			+ "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"
			+ "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"
			+ "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"
			+ "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"
			+ "\1\6\1\11\1\6\1\11\4\6\31\0\140\6\22\7\4\0\14\7"
			+ "\16\0\5\7\11\0\1\7\21\0\130\7\5\0\23\7\12\0\1\7"
			+ "\13\0\1\11\1\0\3\11\1\0\1\11\1\0\2\11\1\6\21\11"
			+ "\1\0\11\11\43\6\1\0\2\6\3\11\3\6\1\11\1\6\1\11"
			+ "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"
			+ "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"
			+ "\5\6\1\11\1\6\1\0\1\11\1\6\2\11\1\6\4\0\60\11"
			+ "\60\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"
			+ "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"
			+ "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"
			+ "\1\6\1\11\1\6\1\11\1\6\1\0\4\7\3\0\1\11\1\6"
			+ "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"
			+ "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"
			+ "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"
			+ "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"
			+ "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"
			+ "\1\11\1\6\2\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"
			+ "\1\11\1\6\1\11\1\6\1\11\1\6\1\0\1\11\1\6\1\11"
			+ "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"
			+ "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"
			+ "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"
			+ "\1\6\1\11\1\6\1\11\1\6\2\0\1\11\1\6\6\0\1\11"
			+ "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"
			+ "\1\6\1\11\1\6\1\11\1\6\41\0\46\11\2\0\1\7\7\0"
			+ "\47\6\11\0\21\7\1\0\27\7\1\0\3\7\1\0\1\7\1\0"
			+ "\2\7\1\0\1\7\13\0\33\7\5\0\3\7\15\0\4\7\14\0"
			+ "\6\7\13\0\32\7\5\0\31\7\7\0\12\7\4\0\146\7\1\0"
			+ "\11\7\1\0\12\7\1\0\23\7\2\0\1\7\17\0\74\7\2\0"
			+ "\3\7\60\0\62\7\u014f\0\71\7\2\0\22\7\2\0\5\7\3\0"
			+ "\14\7\2\0\12\7\21\0\3\7\1\0\10\7\2\0\2\7\2\0"
			+ "\26\7\1\0\7\7\1\0\1\7\3\0\4\7\2\0\11\7\2\0"
			+ "\2\7\2\0\3\7\11\0\1\7\4\0\2\7\1\0\5\7\2\0"
			+ "\16\7\15\0\3\7\1\0\6\7\4\0\2\7\2\0\26\7\1\0"
			+ "\7\7\1\0\2\7\1\0\2\7\1\0\2\7\2\0\1\7\1\0"
			+ "\5\7\4\0\2\7\2\0\3\7\13\0\4\7\1\0\1\7\7\0"
			+ "\17\7\14\0\3\7\1\0\11\7\1\0\3\7\1\0\26\7\1\0"
			+ "\7\7\1\0\2\7\1\0\5\7\2\0\12\7\1\0\3\7\1\0"
			+ "\3\7\2\0\1\7\17\0\4\7\2\0\12\7\1\0\1\7\17\0"
			+ "\3\7\1\0\10\7\2\0\2\7\2\0\26\7\1\0\7\7\1\0"
			+ "\2\7\1\0\5\7\2\0\10\7\3\0\2\7\2\0\3\7\10\0"
			+ "\2\7\4\0\2\7\1\0\3\7\4\0\12\7\1\0\1\7\20\0"
			+ "\2\7\1\0\6\7\3\0\3\7\1\0\4\7\3\0\2\7\1\0"
			+ "\1\7\1\0\2\7\3\0\2\7\3\0\3\7\3\0\10\7\1\0"
			+ "\3\7\4\0\5\7\3\0\3\7\1\0\4\7\11\0\1\7\17\0"
			+ "\11\7\11\0\1\7\7\0\3\7\1\0\10\7\1\0\3\7\1\0"
			+ "\27\7\1\0\12\7\1\0\5\7\4\0\7\7\1\0\3\7\1\0"
			+ "\4\7\7\0\2\7\11\0\2\7\4\0\12\7\22\0\2\7\1\0"
			+ "\10\7\1\0\3\7\1\0\27\7\1\0\12\7\1\0\5\7\2\0"
			+ "\11\7\1\0\3\7\1\0\4\7\7\0\2\7\7\0\1\7\1\0"
			+ "\2\7\4\0\12\7\22\0\2\7\1\0\10\7\1\0\3\7\1\0"
			+ "\27\7\1\0\20\7\4\0\6\7\2\0\3\7\1\0\4\7\11\0"
			+ "\1\7\10\0\2\7\4\0\12\7\22\0\2\7\1\0\22\7\3\0"
			+ "\30\7\1\0\11\7\1\0\1\7\2\0\7\7\3\0\1\7\4\0"
			+ "\6\7\1\0\1\7\1\0\10\7\22\0\2\7\15\0\72\7\4\0"
			+ "\20\7\1\0\12\7\47\0\2\7\1\0\1\7\2\0\2\7\1\0"
			+ "\1\7\2\0\1\7\6\0\4\7\1\0\7\7\1\0\3\7\1\0"
			+ "\1\7\1\0\1\7\2\0\2\7\1\0\15\7\1\0\3\7\2\0"
			+ "\5\7\1\0\1\7\1\0\6\7\2\0\12\7\2\0\2\7\42\0"
			+ "\1\7\27\0\2\7\6\0\12\7\13\0\1\7\1\0\1\7\1\0"
			+ "\1\7\4\0\12\7\1\0\42\7\6\0\24\7\1\0\6\7\4\0"
			+ "\10\7\1\0\44\7\11\0\1\7\71\0\42\7\1\0\5\7\1\0"
			+ "\2\7\1\0\7\7\3\0\4\7\6\0\12\7\6\0\12\7\106\0"
			+ "\46\11\12\0\51\7\7\0\132\7\5\0\104\7\5\0\122\7\6\0"
			+ "\7\7\1\0\77\7\1\0\1\7\1\0\4\7\2\0\7\7\1\0"
			+ "\1\7\1\0\4\7\2\0\47\7\1\0\1\7\1\0\4\7\2\0"
			+ "\37\7\1\0\1\7\1\0\4\7\2\0\7\7\1\0\1\7\1\0"
			+ "\4\7\2\0\7\7\1\0\7\7\1\0\27\7\1\0\37\7\1\0"
			+ "\1\7\1\0\4\7\2\0\7\7\1\0\47\7\1\0\23\7\16\0"
			+ "\11\7\56\0\125\7\14\0\u026c\7\2\0\10\7\12\0\32\7\5\0"
			+ "\113\7\3\0\3\7\17\0\15\7\1\0\7\7\13\0\25\7\13\0"
			+ "\24\7\14\0\15\7\1\0\3\7\1\0\2\7\14\0\124\7\3\0"
			+ "\1\7\3\0\3\7\2\0\12\7\41\0\3\7\2\0\12\7\6\0"
			+ "\130\7\10\0\52\7\126\0\35\7\3\0\14\7\4\0\14\7\12\0"
			+ "\50\7\2\0\5\7\u038b\0\54\6\66\7\12\6\224\0\1\11\1\6"
			+ "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"
			+ "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"
			+ "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"
			+ "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"
			+ "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"
			+ "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"
			+ "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"
			+ "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"
			+ "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"
			+ "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"
			+ "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"
			+ "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"
			+ "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"
			+ "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"
			+ "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\7\6\4\0\1\11"
			+ "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"
			+ "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"
			+ "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"
			+ "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"
			+ "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"
			+ "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"
			+ "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"
			+ "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"
			+ "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\6\0"
			+ "\10\6\10\11\6\6\2\0\6\11\2\0\10\6\10\11\10\6\10\11"
			+ "\6\6\2\0\6\11\2\0\10\6\1\0\1\11\1\0\1\11\1\0"
			+ "\1\11\1\0\1\11\10\6\10\11\16\6\2\0\10\6\10\7\10\6"
			+ "\10\7\10\6\10\7\5\6\1\0\2\6\4\11\1\7\1\0\1\6"
			+ "\3\0\3\6\1\0\2\6\4\11\1\7\3\0\4\6\2\0\2\6"
			+ "\4\11\4\0\10\6\5\11\5\0\3\6\1\0\2\6\4\11\1\7"
			+ "\17\0\4\7\32\0\5\7\20\0\2\7\23\0\1\7\13\0\4\7"
			+ "\6\0\6\7\1\0\1\6\15\0\1\6\40\0\22\7\36\0\15\7"
			+ "\4\0\1\7\3\0\6\7\27\0\1\11\4\0\1\11\2\0\1\6"
			+ "\3\11\2\6\3\11\1\6\1\0\1\11\3\0\5\11\6\0\1\11"
			+ "\1\0\1\11\1\0\1\11\1\0\4\11\1\0\1\6\2\11\1\0"
			+ "\1\11\1\6\4\7\1\6\3\0\1\6\2\11\5\0\1\11\4\6"
			+ "\26\0\44\7\u0e81\0\3\7\31\0\17\7\1\0\5\7\2\0\5\7"
			+ "\4\0\126\7\2\0\2\7\2\0\3\7\1\0\137\7\5\0\50\7"
			+ "\4\0\136\7\21\0\30\7\70\0\20\7\u0200\0\u19b6\7\112\0\u51a6\7"
			+ "\132\0\u048d\7\u0773\0\u2ba4\7\u215c\0\u012e\7\2\0\73\7\225\0\7\6"
			+ "\14\0\5\6\5\0\14\7\1\0\15\7\1\0\5\7\1\0\1\7"
			+ "\1\0\2\7\1\0\2\7\1\0\154\7\41\0\u016b\7\22\0\100\7"
			+ "\2\0\66\7\50\0\15\7\3\0\20\7\20\0\4\7\17\0\2\7"
			+ "\30\0\3\7\31\0\1\7\6\0\5\7\1\0\207\7\2\0\1\7"
			+ "\4\0\1\7\13\0\12\7\7\0\32\11\4\0\1\7\1\0\32\6"
			+ "\12\0\132\7\3\0\6\7\2\0\6\7\2\0\6\7\2\0\3\7"
			+ "\3\0\2\7\3\0\2\7\22\0\3\7\4\0";

	/**
	 * Translates characters to character classes
	 */
	private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

	/**
	 * Translates DFA states to action switch labels.
	 */
	private static final int[] ZZ_ACTION = zzUnpackAction();

	private static final String ZZ_ACTION_PACKED_0 = "\1\0\1\1\2\2\1\3\1\4\1\5\1\1\1\6"
			+ "\1\7\2\10\5\5\1\11\1\12\1\13\1\14\1\15"
			+ "\1\16\1\17\1\20\1\21\5\5\1\22\1\23\1\24"
			+ "\1\25\1\26\3\5\1\27\3\0\1\30\1\31\6\5"
			+ "\1\32\3\5\1\33\1\34\5\5\1\35\1\36\5\5"
			+ "\1\0\1\37\1\5\1\40\7\5\1\41\3\5\1\42"
			+ "\6\5\1\0\1\5\1\43\5\5\1\44\1\45\6\5"
			+ "\1\46\1\5\1\47\1\50\1\51\2\5\1\52\1\53"
			+ "\1\5\1\54\3\5\1\55\1\56\1\5\1\57\1\60"
			+ "\1\5\1\61\1\62\1\63\4\5\1\64";

	private static int[] zzUnpackAction() {
		int[] result = new int[135];
		int offset = 0;
		offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAction(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/**
	 * Translates a state to a row index in the transition table
	 */
	private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

	private static final String ZZ_ROWMAP_PACKED_0 = "\0\0\0\60\0\140\0\60\0\220\0\60\0\300\0\360"
			+ "\0\u0120\0\u0150\0\60\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240"
			+ "\0\u0270\0\60\0\60\0\60\0\60\0\60\0\60\0\60"
			+ "\0\60\0\60\0\u02a0\0\u02d0\0\u0300\0\u0330\0\u0360\0\60"
			+ "\0\60\0\u0390\0\60\0\60\0\u03c0\0\u03f0\0\u0420\0\60"
			+ "\0\u0450\0\u0480\0\360\0\60\0\60\0\u04b0\0\u04e0\0\u0510"
			+ "\0\u0540\0\u0570\0\u05a0\0\300\0\u05d0\0\u0600\0\u0630\0\300"
			+ "\0\300\0\u0660\0\u0690\0\u06c0\0\u06f0\0\u0720\0\60\0\60"
			+ "\0\u0750\0\u0780\0\u07b0\0\u07e0\0\u0810\0\u0840\0\300\0\u0870"
			+ "\0\300\0\u08a0\0\u08d0\0\u0900\0\u0930\0\u0960\0\u0990\0\u09c0"
			+ "\0\300\0\u09f0\0\u0a20\0\u0a50\0\300\0\u0a80\0\u0ab0\0\u0ae0"
			+ "\0\u0b10\0\u0b40\0\u0b70\0\u0ba0\0\u0bd0\0\300\0\u0c00\0\u0c30"
			+ "\0\u0c60\0\u0c90\0\u0cc0\0\300\0\300\0\u0cf0\0\u0d20\0\u0d50"
			+ "\0\u0d80\0\u0db0\0\u0de0\0\300\0\u0e10\0\300\0\300\0\300"
			+ "\0\u0e40\0\u0e70\0\300\0\300\0\u0ea0\0\300\0\u0ed0\0\u0f00"
			+ "\0\u0f30\0\300\0\300\0\u0f60\0\300\0\300\0\u0f90\0\300"
			+ "\0\300\0\300\0\u0fc0\0\u0ff0\0\u1020\0\u1050\0\300";

	private static int[] zzUnpackRowMap() {
		int[] result = new int[135];
		int offset = 0;
		offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackRowMap(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int high = packed.charAt(i++) << 16;
			result[j++] = high | packed.charAt(i++);
		}
		return j;
	}

	/**
	 * The transition table of the DFA
	 */
	private static final int[] ZZ_TRANS = zzUnpackTrans();

	private static final String ZZ_TRANS_PACKED_0 = "\1\2\1\3\2\4\1\5\1\6\1\7\1\2\1\10"
			+ "\1\11\1\12\1\13\1\14\1\15\2\7\1\16\1\17"
			+ "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"
			+ "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"
			+ "\1\7\1\40\1\41\1\42\1\43\1\44\1\45\1\46"
			+ "\2\7\1\47\1\7\1\50\1\7\62\0\1\4\61\0"
			+ "\1\51\1\52\60\0\2\7\1\0\1\7\1\0\11\7"
			+ "\11\0\6\7\5\0\6\7\1\0\1\7\10\53\1\54"
			+ "\47\53\6\0\2\11\1\0\1\11\1\0\11\11\11\0"
			+ "\6\11\5\0\6\11\1\0\1\11\13\0\1\13\1\14"
			+ "\7\0\1\55\46\0\2\14\51\0\2\7\1\0\1\7"
			+ "\1\0\3\7\1\56\5\7\11\0\5\7\1\57\5\0"
			+ "\6\7\1\0\1\7\6\0\2\7\1\0\1\7\1\0"
			+ "\4\7\1\60\4\7\11\0\3\7\1\61\2\7\5\0"
			+ "\1\62\5\7\1\0\1\63\6\0\2\7\1\0\1\7"
			+ "\1\0\11\7\11\0\6\7\5\0\3\7\1\64\2\7"
			+ "\1\0\1\7\6\0\2\7\1\0\1\7\1\0\5\7"
			+ "\1\65\3\7\11\0\6\7\5\0\6\7\1\0\1\7"
			+ "\6\0\2\7\1\0\1\7\1\0\11\7\11\0\3\7"
			+ "\1\66\1\7\1\67\5\0\6\7\1\0\1\7\6\0"
			+ "\2\7\1\0\1\7\1\0\2\7\1\70\1\7\1\71"
			+ "\4\7\11\0\6\7\5\0\6\7\1\0\1\7\6\0"
			+ "\2\7\1\0\1\7\1\0\7\7\1\72\1\7\11\0"
			+ "\2\7\1\73\3\7\5\0\6\7\1\0\1\7\6\0"
			+ "\2\7\1\0\1\7\1\0\11\7\11\0\5\7\1\74"
			+ "\5\0\6\7\1\0\1\7\6\0\2\7\1\0\1\7"
			+ "\1\0\5\7\1\75\3\7\11\0\6\7\5\0\6\7"
			+ "\1\0\1\7\6\0\2\7\1\0\1\7\1\0\11\7"
			+ "\11\0\1\76\5\7\5\0\6\7\1\0\1\7\33\0"
			+ "\1\77\11\0\1\100\20\0\2\7\1\0\1\7\1\0"
			+ "\5\7\1\101\3\7\11\0\6\7\5\0\6\7\1\0"
			+ "\1\7\6\0\2\7\1\0\1\7\1\0\7\7\1\102"
			+ "\1\7\11\0\6\7\5\0\6\7\1\0\1\7\6\0"
			+ "\2\7\1\0\1\7\1\0\11\7\11\0\1\103\1\7"
			+ "\1\104\2\7\1\105\5\0\6\7\1\0\1\7\1\51"
			+ "\1\3\1\4\55\51\60\106\6\0\2\7\1\0\1\7"
			+ "\1\0\4\7\1\107\4\7\11\0\6\7\5\0\6\7"
			+ "\1\0\1\7\6\0\2\7\1\0\1\7\1\0\11\7"
			+ "\11\0\3\7\1\110\2\7\5\0\6\7\1\0\1\7"
			+ "\6\0\2\7\1\0\1\7\1\0\6\7\1\111\2\7"
			+ "\11\0\6\7\5\0\6\7\1\0\1\7\6\0\2\7"
			+ "\1\0\1\7\1\0\11\7\11\0\4\7\1\112\1\7"
			+ "\5\0\6\7\1\0\1\7\6\0\2\7\1\0\1\7"
			+ "\1\0\11\7\11\0\6\7\5\0\1\7\1\113\4\7"
			+ "\1\0\1\7\6\0\2\7\1\0\1\7\1\0\11\7"
			+ "\11\0\1\7\1\114\4\7\5\0\6\7\1\0\1\7"
			+ "\6\0\2\7\1\0\1\7\1\0\10\7\1\115\11\0"
			+ "\6\7\5\0\6\7\1\0\1\7\6\0\2\7\1\0"
			+ "\1\7\1\0\11\7\11\0\5\7\1\116\5\0\6\7"
			+ "\1\0\1\7\6\0\2\7\1\0\1\7\1\0\11\7"
			+ "\11\0\1\7\1\117\4\7\5\0\6\7\1\0\1\7"
			+ "\6\0\2\7\1\0\1\7\1\0\3\7\1\120\5\7"
			+ "\11\0\6\7\5\0\2\7\1\121\3\7\1\0\1\7"
			+ "\6\0\2\7\1\0\1\7\1\0\5\7\1\122\1\7"
			+ "\1\123\1\7\11\0\6\7\5\0\6\7\1\0\1\7"
			+ "\6\0\2\7\1\0\1\7\1\0\11\7\11\0\4\7"
			+ "\1\124\1\7\5\0\6\7\1\0\1\7\6\0\2\7"
			+ "\1\0\1\7\1\0\11\7\11\0\1\7\1\125\4\7"
			+ "\5\0\6\7\1\0\1\7\6\0\2\7\1\0\1\7"
			+ "\1\0\11\7\11\0\6\7\5\0\5\7\1\126\1\0"
			+ "\1\7\6\0\2\7\1\0\1\7\1\0\11\7\11\0"
			+ "\1\7\1\127\4\7\5\0\6\7\1\0\1\7\6\0"
			+ "\2\7\1\0\1\7\1\0\11\7\11\0\1\130\5\7"
			+ "\5\0\6\7\1\0\1\7\6\0\2\7\1\0\1\7"
			+ "\1\0\11\7\11\0\1\7\1\131\4\7\5\0\6\7"
			+ "\1\0\1\7\6\0\2\7\1\0\1\7\1\0\11\7"
			+ "\11\0\1\132\5\7\5\0\6\7\1\0\1\7\6\0"
			+ "\2\7\1\0\1\7\1\0\11\7\11\0\1\133\5\7"
			+ "\5\0\6\7\1\0\1\7\5\106\1\134\52\106\6\0"
			+ "\2\7\1\0\1\7\1\0\11\7\11\0\4\7\1\135"
			+ "\1\7\5\0\6\7\1\0\1\7\6\0\2\7\1\0"
			+ "\1\7\1\0\5\7\1\136\3\7\11\0\6\7\5\0"
			+ "\6\7\1\0\1\7\6\0\2\7\1\0\1\7\1\0"
			+ "\11\7\11\0\1\7\1\137\4\7\5\0\6\7\1\0"
			+ "\1\7\6\0\2\7\1\0\1\7\1\0\5\7\1\140"
			+ "\3\7\11\0\6\7\5\0\6\7\1\0\1\7\6\0"
			+ "\2\7\1\0\1\7\1\0\2\7\1\141\6\7\11\0"
			+ "\6\7\5\0\6\7\1\0\1\7\6\0\2\7\1\0"
			+ "\1\7\1\0\11\7\11\0\4\7\1\142\1\7\5\0"
			+ "\6\7\1\0\1\7\6\0\2\7\1\0\1\7\1\0"
			+ "\10\7\1\143\11\0\6\7\5\0\6\7\1\0\1\7"
			+ "\6\0\2\7\1\0\1\7\1\0\5\7\1\144\3\7"
			+ "\11\0\6\7\5\0\6\7\1\0\1\7\6\0\2\7"
			+ "\1\0\1\7\1\0\4\7\1\145\4\7\11\0\6\7"
			+ "\5\0\6\7\1\0\1\7\6\0\2\7\1\0\1\7"
			+ "\1\0\5\7\1\146\3\7\11\0\6\7\5\0\3\7"
			+ "\1\147\2\7\1\0\1\7\6\0\2\7\1\0\1\7"
			+ "\1\0\11\7\11\0\6\7\5\0\1\7\1\150\4\7"
			+ "\1\0\1\7\6\0\2\7\1\0\1\7\1\0\4\7"
			+ "\1\151\4\7\11\0\6\7\5\0\6\7\1\0\1\7"
			+ "\6\0\2\7\1\0\1\7\1\0\11\7\11\0\2\7"
			+ "\1\152\3\7\5\0\6\7\1\0\1\7\6\0\2\7"
			+ "\1\0\1\7\1\0\4\7\1\153\4\7\11\0\6\7"
			+ "\5\0\6\7\1\0\1\7\6\0\2\7\1\0\1\7"
			+ "\1\0\11\7\11\0\2\7\1\154\3\7\5\0\6\7"
			+ "\1\0\1\7\6\0\2\7\1\0\1\7\1\0\11\7"
			+ "\11\0\3\7\1\155\2\7\5\0\6\7\1\0\1\7"
			+ "\6\0\2\7\1\0\1\7\1\0\11\7\11\0\1\7"
			+ "\1\156\4\7\5\0\6\7\1\0\1\7\4\106\1\4"
			+ "\1\134\52\106\6\0\2\7\1\0\1\7\1\0\5\7"
			+ "\1\157\3\7\11\0\6\7\5\0\6\7\1\0\1\7"
			+ "\6\0\2\7\1\0\1\7\1\0\11\7\11\0\6\7"
			+ "\5\0\2\7\1\160\3\7\1\0\1\7\6\0\2\7"
			+ "\1\0\1\7\1\0\4\7\1\161\4\7\11\0\6\7"
			+ "\5\0\6\7\1\0\1\7\6\0\2\7\1\0\1\7"
			+ "\1\0\3\7\1\162\5\7\11\0\6\7\5\0\6\7"
			+ "\1\0\1\7\6\0\2\7\1\0\1\7\1\0\11\7"
			+ "\11\0\4\7\1\163\1\7\5\0\6\7\1\0\1\7"
			+ "\6\0\2\7\1\0\1\7\1\0\11\7\11\0\2\7"
			+ "\1\164\3\7\5\0\6\7\1\0\1\7\6\0\2\7"
			+ "\1\0\1\7\1\0\11\7\11\0\5\7\1\165\5\0"
			+ "\6\7\1\0\1\7\6\0\2\7\1\0\1\7\1\0"
			+ "\11\7\11\0\6\7\5\0\4\7\1\166\1\7\1\0"
			+ "\1\7\6\0\2\7\1\0\1\7\1\0\7\7\1\167"
			+ "\1\7\11\0\6\7\5\0\6\7\1\0\1\7\6\0"
			+ "\2\7\1\0\1\7\1\0\11\7\11\0\5\7\1\170"
			+ "\5\0\6\7\1\0\1\7\6\0\2\7\1\0\1\7"
			+ "\1\0\11\7\11\0\6\7\5\0\3\7\1\171\2\7"
			+ "\1\0\1\7\6\0\2\7\1\0\1\7\1\0\11\7"
			+ "\11\0\1\7\1\172\4\7\5\0\6\7\1\0\1\7"
			+ "\6\0\2\7\1\0\1\7\1\0\5\7\1\173\3\7"
			+ "\11\0\6\7\5\0\6\7\1\0\1\7\6\0\2\7"
			+ "\1\0\1\7\1\0\6\7\1\174\2\7\11\0\6\7"
			+ "\5\0\6\7\1\0\1\7\6\0\2\7\1\0\1\7"
			+ "\1\0\4\7\1\175\4\7\11\0\6\7\5\0\6\7"
			+ "\1\0\1\7\6\0\2\7\1\0\1\7\1\0\6\7"
			+ "\1\176\2\7\11\0\6\7\5\0\6\7\1\0\1\7"
			+ "\6\0\2\7\1\0\1\7\1\0\11\7\11\0\6\7"
			+ "\5\0\3\7\1\177\2\7\1\0\1\7\6\0\2\7"
			+ "\1\0\1\7\1\0\11\7\11\0\3\7\1\200\2\7"
			+ "\5\0\6\7\1\0\1\7\6\0\2\7\1\0\1\7"
			+ "\1\0\6\7\1\201\2\7\11\0\6\7\5\0\6\7"
			+ "\1\0\1\7\6\0\2\7\1\0\1\7\1\0\11\7"
			+ "\11\0\4\7\1\202\1\7\5\0\6\7\1\0\1\7"
			+ "\6\0\2\7\1\0\1\7\1\0\11\7\11\0\6\7"
			+ "\5\0\1\7\1\203\4\7\1\0\1\7\6\0\2\7"
			+ "\1\0\1\7\1\0\5\7\1\204\3\7\11\0\6\7"
			+ "\5\0\6\7\1\0\1\7\6\0\2\7\1\0\1\7"
			+ "\1\0\7\7\1\205\1\7\11\0\6\7\5\0\6\7"
			+ "\1\0\1\7\6\0\2\7\1\0\1\7\1\0\11\7"
			+ "\11\0\1\7\1\206\4\7\5\0\6\7\1\0\1\7"
			+ "\6\0\2\7\1\0\1\7\1\0\11\7\11\0\6\7"
			+ "\5\0\2\7\1\207\3\7\1\0\1\7";

	private static int[] zzUnpackTrans() {
		int[] result = new int[4224];
		int offset = 0;
		offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackTrans(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			value--;
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/* error codes */
	private static final int ZZ_UNKNOWN_ERROR = 0;
	private static final int ZZ_NO_MATCH = 1;
	private static final int ZZ_PUSHBACK_2BIG = 2;

	/* error messages for the codes above */
	private static final String ZZ_ERROR_MSG[] = {
			"Unkown internal scanner error", "Error: could not match input",
			"Error: pushback value was too large" };

	/**
	 * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
	 */
	private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

	private static final String ZZ_ATTRIBUTE_PACKED_0 = "\1\0\1\11\1\1\1\11\1\1\1\11\4\1\1\11"
			+ "\6\1\11\11\5\1\2\11\1\1\2\11\3\1\1\11"
			+ "\3\0\2\11\21\1\2\11\5\1\1\0\25\1\1\0" + "\53\1";

	private static int[] zzUnpackAttribute() {
		int[] result = new int[135];
		int offset = 0;
		offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAttribute(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/** the input device */
	private java.io.Reader zzReader;

	/** the current state of the DFA */
	private int zzState;

	/** the current lexical state */
	private int zzLexicalState = YYINITIAL;

	/**
	 * this buffer contains the current text to be matched and is the source of
	 * the yytext() string
	 */
	private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

	/** the textposition at the last accepting state */
	private int zzMarkedPos;

	/** the current text position in the buffer */
	private int zzCurrentPos;

	/** startRead marks the beginning of the yytext() string in the buffer */
	private int zzStartRead;

	/**
	 * endRead marks the last character in the buffer, that has been read from
	 * input
	 */
	private int zzEndRead;

	/** number of newlines encountered up to the start of the matched text */
	private int yyline;

	/** the number of characters up to the start of the matched text */
	private int yychar;

	/**
	 * the number of characters from the last newline up to the start of the
	 * matched text
	 */
	private int yycolumn;

	/**
	 * zzAtBOL == true <=> the scanner is currently at the beginning of a line
	 */
	private boolean zzAtBOL = true;

	/** zzAtEOF == true <=> the scanner is at the EOF */
	private boolean zzAtEOF;

	/** denotes if the user-EOF-code has already been executed */
	private boolean zzEOFDone;

	/* user code: */
	StringBuffer string = new StringBuffer();

	private Symbol symbol(int type) {
		return new Symbol(type, yyline, yycolumn);
	}

	private Symbol symbol(int type, Object value) {
		return new Symbol(type, yyline, yycolumn, value);
	}

	/**
	 * Creates a new scanner There is also a java.io.InputStream version of this
	 * constructor.
	 * 
	 * @param in
	 *            the java.io.Reader to read input from.
	 */
	scanner(java.io.Reader in) {
		this.zzReader = in;
	}

	/**
	 * Creates a new scanner. There is also java.io.Reader version of this
	 * constructor.
	 * 
	 * @param in
	 *            the java.io.Inputstream to read input from.
	 */
	scanner(java.io.InputStream in) {
		this(new java.io.InputStreamReader(in));
	}

	/**
	 * Unpacks the compressed character translation table.
	 * 
	 * @param packed
	 *            the packed character translation table
	 * @return the unpacked character translation table
	 */
	private static char[] zzUnpackCMap(String packed) {
		char[] map = new char[0x10000];
		int i = 0; /* index in packed string */
		int j = 0; /* index in unpacked array */
		while (i < 3114) {
			int count = packed.charAt(i++);
			char value = packed.charAt(i++);
			do
				map[j++] = value;
			while (--count > 0);
		}
		return map;
	}

	/**
	 * Refills the input buffer.
	 * 
	 * @return <code>false</code>, iff there was new input.
	 * 
	 * @exception java.io.IOException
	 *                if any I/O-Error occurs
	 */
	private boolean zzRefill() throws java.io.IOException {

		/* first: make room (if you can) */
		if (zzStartRead > 0) {
			System.arraycopy(zzBuffer, zzStartRead, zzBuffer, 0, zzEndRead
					- zzStartRead);

			/* translate stored positions */
			zzEndRead -= zzStartRead;
			zzCurrentPos -= zzStartRead;
			zzMarkedPos -= zzStartRead;
			zzStartRead = 0;
		}

		/* is the buffer big enough? */
		if (zzCurrentPos >= zzBuffer.length) {
			/* if not: blow it up */
			char newBuffer[] = new char[zzCurrentPos * 2];
			System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
			zzBuffer = newBuffer;
		}

		/* finally: fill the buffer with new input */
		int numRead = zzReader.read(zzBuffer, zzEndRead, zzBuffer.length
				- zzEndRead);

		if (numRead > 0) {
			zzEndRead += numRead;
			return false;
		}
		// unlikely but not impossible: read 0 characters, but not at end of
		// stream
		if (numRead == 0) {
			int c = zzReader.read();
			if (c == -1) {
				return true;
			} else {
				zzBuffer[zzEndRead++] = (char) c;
				return false;
			}
		}

		// numRead < 0
		return true;
	}

	/**
	 * Closes the input stream.
	 */
	public final void yyclose() throws java.io.IOException {
		zzAtEOF = true; /* indicate end of file */
		zzEndRead = zzStartRead; /* invalidate buffer */

		if (zzReader != null)
			zzReader.close();
	}

	/**
	 * Resets the scanner to read from a new input stream. Does not close the
	 * old reader.
	 * 
	 * All internal variables are reset, the old input stream <b>cannot</b> be
	 * reused (internal buffer is discarded and lost). Lexical state is set to
	 * <tt>ZZ_INITIAL</tt>.
	 * 
	 * @param reader
	 *            the new input stream
	 */
	public final void yyreset(java.io.Reader reader) {
		zzReader = reader;
		zzAtBOL = true;
		zzAtEOF = false;
		zzEOFDone = false;
		zzEndRead = zzStartRead = 0;
		zzCurrentPos = zzMarkedPos = 0;
		yyline = yychar = yycolumn = 0;
		zzLexicalState = YYINITIAL;
	}

	/**
	 * Returns the current lexical state.
	 */
	public final int yystate() {
		return zzLexicalState;
	}

	/**
	 * Enters a new lexical state
	 * 
	 * @param newState
	 *            the new lexical state
	 */
	public final void yybegin(int newState) {
		zzLexicalState = newState;
	}

	/**
	 * Returns the text matched by the current regular expression.
	 */
	public final String yytext() {
		return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
	}

	/**
	 * Returns the character at position <tt>pos</tt> from the matched text.
	 * 
	 * It is equivalent to yytext().charAt(pos), but faster
	 * 
	 * @param pos
	 *            the position of the character to fetch. A value from 0 to
	 *            yylength()-1.
	 * 
	 * @return the character at position pos
	 */
	public final char yycharat(int pos) {
		return zzBuffer[zzStartRead + pos];
	}

	/**
	 * Returns the length of the matched text region.
	 */
	public final int yylength() {
		return zzMarkedPos - zzStartRead;
	}

	/**
	 * Reports an error that occured while scanning.
	 * 
	 * In a wellformed scanner (no or only correct usage of yypushback(int) and
	 * a match-all fallback rule) this method will only be called with things
	 * that "Can't Possibly Happen". If this method is called, something is
	 * seriously wrong (e.g. a JFlex bug producing a faulty scanner etc.).
	 * 
	 * Usual syntax/scanner level error handling should be done in error
	 * fallback rules.
	 * 
	 * @param errorCode
	 *            the code of the errormessage to display
	 */
	private void zzScanError(int errorCode) {
		String message;
		try {
			message = ZZ_ERROR_MSG[errorCode];
		} catch (ArrayIndexOutOfBoundsException e) {
			message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
		}

		throw new Error(message);
	}

	/**
	 * Pushes the specified amount of characters back into the input stream.
	 * 
	 * They will be read again by then next call of the scanning method
	 * 
	 * @param number
	 *            the number of characters to be read again. This number must
	 *            not be greater than yylength()!
	 */
	public void yypushback(int number) {
		if (number > yylength())
			zzScanError(ZZ_PUSHBACK_2BIG);

		zzMarkedPos -= number;
	}

	/**
	 * Contains user EOF-code, which will be executed exactly once, when the end
	 * of file is reached
	 */
	private void zzDoEOF() throws java.io.IOException {
		if (!zzEOFDone) {
			zzEOFDone = true;
			yyclose();
		}
	}

	/**
	 * Resumes scanning until the next regular expression is matched, the end of
	 * input is encountered or an I/O-Error occurs.
	 * 
	 * @return the next token
	 * @exception java.io.IOException
	 *                if any I/O-Error occurs
	 */
	public java_cup.runtime.Symbol next_token() throws java.io.IOException,
			SyntaxError {
		int zzInput;
		int zzAction;

		// cached fields:
		int zzCurrentPosL;
		int zzMarkedPosL;
		int zzEndReadL = zzEndRead;
		char[] zzBufferL = zzBuffer;
		char[] zzCMapL = ZZ_CMAP;

		int[] zzTransL = ZZ_TRANS;
		int[] zzRowMapL = ZZ_ROWMAP;
		int[] zzAttrL = ZZ_ATTRIBUTE;

		while (true) {
			zzMarkedPosL = zzMarkedPos;

			boolean zzR = false;
			for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL; zzCurrentPosL++) {
				switch (zzBufferL[zzCurrentPosL]) {
				case '\u000B':
				case '\u000C':
				case '\u0085':
				case '\u2028':
				case '\u2029':
					yyline++;
					yycolumn = 0;
					zzR = false;
					break;
				case '\r':
					yyline++;
					yycolumn = 0;
					zzR = true;
					break;
				case '\n':
					if (zzR)
						zzR = false;
					else {
						yyline++;
						yycolumn = 0;
					}
					break;
				default:
					zzR = false;
					yycolumn++;
				}
			}

			if (zzR) {
				// peek one character ahead if it is \n (if we have counted one
				// line too much)
				boolean zzPeek;
				if (zzMarkedPosL < zzEndReadL)
					zzPeek = zzBufferL[zzMarkedPosL] == '\n';
				else if (zzAtEOF)
					zzPeek = false;
				else {
					boolean eof = zzRefill();
					zzEndReadL = zzEndRead;
					zzMarkedPosL = zzMarkedPos;
					zzBufferL = zzBuffer;
					if (eof)
						zzPeek = false;
					else
						zzPeek = zzBufferL[zzMarkedPosL] == '\n';
				}
				if (zzPeek)
					yyline--;
			}
			zzAction = -1;

			zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

			zzState = ZZ_LEXSTATE[zzLexicalState];

			zzForAction: {
				while (true) {

					if (zzCurrentPosL < zzEndReadL)
						zzInput = zzBufferL[zzCurrentPosL++];
					else if (zzAtEOF) {
						zzInput = YYEOF;
						break zzForAction;
					} else {
						// store back cached positions
						zzCurrentPos = zzCurrentPosL;
						zzMarkedPos = zzMarkedPosL;
						boolean eof = zzRefill();
						// get translated positions and possibly new buffer
						zzCurrentPosL = zzCurrentPos;
						zzMarkedPosL = zzMarkedPos;
						zzBufferL = zzBuffer;
						zzEndReadL = zzEndRead;
						if (eof) {
							zzInput = YYEOF;
							break zzForAction;
						} else {
							zzInput = zzBufferL[zzCurrentPosL++];
						}
					}
					int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
					if (zzNext == -1)
						break zzForAction;
					zzState = zzNext;

					int zzAttributes = zzAttrL[zzState];
					if ((zzAttributes & 1) == 1) {
						zzAction = zzState;
						zzMarkedPosL = zzCurrentPosL;
						if ((zzAttributes & 8) == 8)
							break zzForAction;
					}

				}
			}

			// store back cached position
			zzMarkedPos = zzMarkedPosL;

			switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
			case 2: { /* ignore */
			}
			case 53:
				break;
			case 42: {
				return symbol(sym.CLASS);
			}
			case 54:
				break;
			case 48: {
				return symbol(sym.THREAD);
			}
			case 55:
				break;
			case 11: {
				return symbol(sym.RPAREN);
			}
			case 56:
				break;
			case 41: {
				return symbol(sym.EMPTY);
			}
			case 57:
				break;
			case 32: {
				return symbol(sym.END);
			}
			case 58:
				break;
			case 1: {
				throw new SyntaxError("Illegal character \"" + yytext() + "\"",
						yyline, yycolumn);
			}
			case 59:
				break;
			case 5: {
				return symbol(sym.IDENTIFIER, yytext());
			}
			case 60:
				break;
			case 18: {
				return symbol(sym.LBRACKET);
			}
			case 61:
				break;
			case 44: {
				return symbol(sym.THROW);
			}
			case 62:
				break;
			case 13: {
				return symbol(sym.AND);
			}
			case 63:
				break;
			case 33: {
				return symbol(sym.TRY);
			}
			case 64:
				break;
			case 29: {
				return symbol(sym.ASSIGN);
			}
			case 65:
				break;
			case 3: {
				return symbol(sym.DIV);
			}
			case 66:
				break;
			case 12: {
				return symbol(sym.PLUS);
			}
			case 67:
				break;
			case 25: {
				return symbol(sym.ARROW);
			}
			case 68:
				break;
			case 51: {
				return symbol(sym.EXTENDS);
			}
			case 69:
				break;
			case 17: {
				return symbol(sym.LESS);
			}
			case 70:
				break;
			case 36: {
				return symbol(sym.TRUE);
			}
			case 71:
				break;
			case 50: {
				return symbol(sym.METHOD);
			}
			case 72:
				break;
			case 26: {
				return symbol(sym.DO);
			}
			case 73:
				break;
			case 4: {
				return symbol(sym.TIMES);
			}
			case 74:
				break;
			case 19: {
				return symbol(sym.RBRACKET);
			}
			case 75:
				break;
			case 35: {
				return symbol(sym.ELSE);
			}
			case 76:
				break;
			case 20: {
				return symbol(sym.COLON);
			}
			case 77:
				break;
			case 6: {
				return symbol(sym.PROPERTY, yytext());
			}
			case 78:
				break;
			case 37: {
				return symbol(sym.THEN);
			}
			case 79:
				break;
			case 9: {
				return symbol(sym.GREATER);
			}
			case 80:
				break;
			case 46: {
				return symbol(sym.WHILE);
			}
			case 81:
				break;
			case 16: {
				return symbol(sym.EQUAL);
			}
			case 82:
				break;
			case 52: {
				return symbol(sym.HASPROPERTY);
			}
			case 83:
				break;
			case 30: {
				return symbol(sym.PAIR);
			}
			case 84:
				break;
			case 27: {
				return symbol(sym.IF);
			}
			case 85:
				break;
			case 10: {
				return symbol(sym.LPAREN);
			}
			case 86:
				break;
			case 31: {
				return symbol(sym.FUN);
			}
			case 87:
				break;
			case 24: {
				String text = yytext();
				return symbol(sym.PROPERTY,
						text.substring(1, text.length() - 1));
			}
			case 88:
				break;
			case 14: {
				return symbol(sym.OR);
			}
			case 89:
				break;
			case 28: {
				return symbol(sym.IN);
			}
			case 90:
				break;
			case 15: {
				return symbol(sym.NEG);
			}
			case 91:
				break;
			case 38: {
				return symbol(sym.WITH);
			}
			case 92:
				break;
			case 23: {
				return symbol(sym.SEMICOLON);
			}
			case 93:
				break;
			case 34: {
				return symbol(sym.LET);
			}
			case 94:
				break;
			case 7: {
				return symbol(sym.MINUS);
			}
			case 95:
				break;
			case 45: {
				return symbol(sym.PRINT);
			}
			case 96:
				break;
			case 43: {
				return symbol(sym.CATCH);
			}
			case 97:
				break;
			case 8: {
				int x = 0;
				try {
					x = Integer.parseInt(yytext());
				} catch (NumberFormatException nfe) {
					System.out.println("wrong int format; "
							+ "internal error in scanner");
				}
				return symbol(sym.INTEGER, new Integer(x));
			}
			case 98:
				break;
			case 49: {
				return symbol(sym.SIGNAL);
			}
			case 99:
				break;
			case 47: {
				return symbol(sym.RECFUN);
			}
			case 100:
				break;
			case 21: {
				return symbol(sym.COMMA);
			}
			case 101:
				break;
			case 39: {
				return symbol(sym.WAIT);
			}
			case 102:
				break;
			case 40: {
				return symbol(sym.FALSE);
			}
			case 103:
				break;
			case 22: {
				return symbol(sym.DOT);
			}
			case 104:
				break;
			default:
				if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
					zzAtEOF = true;
					zzDoEOF();
					{
						return new java_cup.runtime.Symbol(sym.EOF);
					}
				} else {
					zzScanError(ZZ_NO_MATCH);
				}
			}
		}
	}

}
