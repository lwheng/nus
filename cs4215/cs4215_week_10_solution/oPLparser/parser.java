
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Mar 29 23:09:30 SGT 2011
//----------------------------------------------------

package oPLparser;

import oPL.*;
import java_cup.runtime.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Mar 29 23:09:30 SGT 2011
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\063\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\005\000\002\002\005\000\002\002\005\000" +
    "\002\002\005\000\002\002\005\000\002\002\005\000\002" +
    "\002\004\000\002\002\005\000\002\002\005\000\002\002" +
    "\005\000\002\002\011\000\002\002\007\000\002\002\007" +
    "\000\002\002\010\000\002\002\005\000\002\002\006\000" +
    "\002\002\005\000\002\002\005\000\002\002\005\000\002" +
    "\002\004\000\002\002\005\000\002\002\005\000\002\002" +
    "\007\000\002\002\005\000\002\002\005\000\002\002\010" +
    "\000\002\002\005\000\002\002\007\000\002\014\004\000" +
    "\002\014\002\000\002\015\012\000\002\007\007\000\002" +
    "\007\002\000\002\010\006\000\002\010\002\000\002\005" +
    "\004\000\002\006\004\000\002\006\002\000\002\003\004" +
    "\000\002\004\004\000\002\004\002\000\002\011\005\000" +
    "\002\012\004\000\002\013\004\000\002\013\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\173\000\040\004\014\005\021\006\005\007\010\010" +
    "\012\011\022\012\007\015\020\030\016\031\011\034\015" +
    "\036\017\044\006\046\004\052\023\001\002\000\040\004" +
    "\014\005\021\006\005\007\010\010\012\011\022\012\007" +
    "\015\020\030\016\031\011\034\015\036\017\044\006\046" +
    "\004\052\023\001\002\000\120\002\ufffe\004\ufffe\005\ufffe" +
    "\006\ufffe\007\ufffe\010\ufffe\011\ufffe\012\ufffe\013\ufffe\015" +
    "\ufffe\016\ufffe\017\ufffe\020\ufffe\021\ufffe\022\ufffe\023\ufffe" +
    "\024\ufffe\025\ufffe\026\ufffe\027\ufffe\030\ufffe\031\ufffe\032" +
    "\ufffe\033\ufffe\034\ufffe\035\ufffe\036\ufffe\037\ufffe\040\ufffe" +
    "\042\ufffe\043\ufffe\044\ufffe\045\ufffe\046\ufffe\047\ufffe\050" +
    "\ufffe\051\ufffe\052\ufffe\053\ufffe\001\002\000\040\004\014" +
    "\005\021\006\005\007\010\010\012\011\022\012\007\015" +
    "\020\030\016\031\011\034\015\036\017\044\006\046\004" +
    "\052\023\001\002\000\004\004\111\001\002\000\120\002" +
    "\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd" +
    "\012\ufffd\013\ufffd\015\ufffd\016\ufffd\017\ufffd\020\ufffd\021" +
    "\ufffd\022\ufffd\023\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd" +
    "\030\ufffd\031\ufffd\032\ufffd\033\ufffd\034\ufffd\035\ufffd\036" +
    "\ufffd\037\ufffd\040\ufffd\042\ufffd\043\ufffd\044\ufffd\045\ufffd" +
    "\046\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd\053\ufffd\001" +
    "\002\000\040\004\014\005\021\006\005\007\010\010\012" +
    "\011\022\012\007\015\020\030\016\031\011\034\015\036" +
    "\017\044\006\046\004\052\023\001\002\000\120\002\ufffc" +
    "\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012" +
    "\ufffc\013\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc" +
    "\022\ufffc\023\ufffc\024\ufffc\025\ufffc\026\ufffc\027\ufffc\030" +
    "\ufffc\031\ufffc\032\ufffc\033\ufffc\034\ufffc\035\ufffc\036\ufffc" +
    "\037\ufffc\040\ufffc\042\ufffc\043\ufffc\044\ufffc\045\ufffc\046" +
    "\ufffc\047\ufffc\050\ufffc\051\ufffc\052\ufffc\053\ufffc\001\002" +
    "\000\040\002\156\017\044\020\051\021\043\022\045\023" +
    "\040\024\054\025\046\026\041\027\056\040\042\043\047" +
    "\045\053\050\052\051\050\001\002\000\120\002\001\004" +
    "\001\005\001\006\001\007\001\010\001\011\001\012\001" +
    "\013\001\015\001\016\001\017\001\020\001\021\001\022" +
    "\001\023\001\024\001\025\001\026\001\027\001\030\001" +
    "\031\001\032\001\033\001\034\001\035\001\036\001\037" +
    "\001\040\001\042\001\043\001\044\001\045\001\046\001" +
    "\047\001\050\001\051\154\052\001\053\001\001\002\000" +
    "\004\004\141\001\002\000\040\004\014\005\021\006\005" +
    "\007\010\010\012\011\022\012\007\015\020\030\016\031" +
    "\011\034\015\036\017\044\006\046\004\052\023\001\002" +
    "\000\006\005\125\037\uffd9\001\002\000\040\004\014\005" +
    "\021\006\005\007\010\010\012\011\022\012\007\015\020" +
    "\030\016\031\011\034\015\036\017\044\006\046\004\052" +
    "\023\001\002\000\120\002\uffff\004\uffff\005\uffff\006\uffff" +
    "\007\uffff\010\uffff\011\uffff\012\uffff\013\uffff\015\uffff\016" +
    "\uffff\017\uffff\020\uffff\021\uffff\022\uffff\023\uffff\024\uffff" +
    "\025\uffff\026\uffff\027\uffff\030\uffff\031\uffff\032\uffff\033" +
    "\uffff\034\uffff\035\uffff\036\uffff\037\uffff\040\uffff\042\uffff" +
    "\043\uffff\044\uffff\045\uffff\046\uffff\047\uffff\050\uffff\051" +
    "\uffff\052\uffff\053\uffff\001\002\000\004\004\110\001\002" +
    "\000\010\013\uffde\053\026\054\024\001\002\000\040\004" +
    "\014\005\021\006\005\007\010\010\012\011\022\012\007" +
    "\015\020\030\016\031\011\034\015\036\017\044\006\046" +
    "\004\052\023\001\002\000\004\013\104\001\002\000\004" +
    "\005\031\001\002\000\006\013\uffde\053\026\001\002\000" +
    "\004\013\uffdf\001\002\000\004\015\032\001\002\000\006" +
    "\004\033\016\uffd6\001\002\000\010\004\033\014\uffd6\016" +
    "\uffd6\001\002\000\004\016\035\001\002\000\004\014\036" +
    "\001\002\000\040\004\014\005\021\006\005\007\010\010" +
    "\012\011\022\012\007\015\020\030\016\031\011\034\015" +
    "\036\017\044\006\046\004\052\023\001\002\000\040\013" +
    "\055\017\044\020\051\021\043\022\045\023\040\024\054" +
    "\025\046\026\041\027\056\040\042\043\047\045\053\050" +
    "\052\051\050\001\002\000\040\004\014\005\021\006\005" +
    "\007\010\010\012\011\022\012\007\015\020\030\016\031" +
    "\011\034\015\036\017\044\006\046\004\052\023\001\002" +
    "\000\040\004\014\005\021\006\005\007\010\010\012\011" +
    "\022\012\007\015\020\030\016\031\011\034\015\036\017" +
    "\044\006\046\004\052\023\001\002\000\040\004\014\005" +
    "\021\006\005\007\010\010\012\011\022\012\007\015\020" +
    "\030\016\031\011\034\015\036\017\044\006\046\004\052" +
    "\023\001\002\000\040\004\014\005\021\006\005\007\010" +
    "\010\012\011\022\012\007\015\020\030\016\031\011\034" +
    "\015\036\017\044\006\046\004\052\023\001\002\000\040" +
    "\004\014\005\021\006\005\007\010\010\012\011\022\012" +
    "\007\015\020\030\016\031\011\034\015\036\017\044\006" +
    "\046\004\052\023\001\002\000\040\004\014\005\021\006" +
    "\005\007\010\010\012\011\022\012\007\015\020\030\016" +
    "\031\011\034\015\036\017\044\006\046\004\052\023\001" +
    "\002\000\040\004\014\005\021\006\005\007\010\010\012" +
    "\011\022\012\007\015\020\030\016\031\011\034\015\036" +
    "\017\044\006\046\004\052\023\001\002\000\040\004\014" +
    "\005\066\006\005\007\010\010\012\011\022\012\007\015" +
    "\020\030\016\031\011\034\015\036\017\044\006\046\004" +
    "\052\023\001\002\000\040\004\014\005\021\006\005\007" +
    "\010\010\012\011\022\012\007\015\020\030\016\031\011" +
    "\034\015\036\017\044\006\046\004\052\023\001\002\000" +
    "\040\004\014\005\021\006\005\007\010\010\012\011\022" +
    "\012\007\015\020\030\016\031\011\034\015\036\017\044" +
    "\006\046\004\052\023\001\002\000\040\004\014\005\021" +
    "\006\005\007\010\010\012\011\022\012\007\015\020\030" +
    "\016\031\011\034\015\036\017\044\006\046\004\052\023" +
    "\001\002\000\040\004\014\005\021\006\005\007\010\010" +
    "\012\011\022\012\007\015\020\030\016\031\011\034\015" +
    "\036\017\044\006\046\004\052\023\001\002\000\040\004" +
    "\014\005\021\006\005\007\010\010\012\011\022\012\007" +
    "\015\020\030\016\031\011\034\015\036\017\044\006\046" +
    "\004\052\023\001\002\000\006\013\uffdd\053\uffdd\001\002" +
    "\000\040\004\014\005\021\006\005\007\010\010\012\011" +
    "\022\012\007\015\020\030\016\031\011\034\015\036\017" +
    "\044\006\046\004\052\023\001\002\000\120\002\ufff6\004" +
    "\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6" +
    "\013\ufff6\015\ufff6\016\ufff6\017\044\020\051\021\043\022" +
    "\045\023\040\024\054\025\046\026\041\027\ufff6\030\ufff6" +
    "\031\ufff6\032\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6\037" +
    "\ufff6\040\ufff6\042\ufff6\043\047\044\ufff6\045\053\046\ufff6" +
    "\047\ufff6\050\ufff6\051\ufff6\052\ufff6\053\ufff6\001\002\000" +
    "\120\002\ufff9\004\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9" +
    "\011\ufff9\012\ufff9\013\ufff9\015\ufff9\016\ufff9\017\ufff9\020" +
    "\ufff9\021\ufff9\022\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9" +
    "\027\ufff9\030\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9\035" +
    "\ufff9\036\ufff9\037\ufff9\040\ufff9\042\ufff9\043\047\044\ufff9" +
    "\045\ufff9\046\ufff9\047\ufff9\050\ufff9\051\ufff9\052\ufff9\053" +
    "\ufff9\001\002\000\116\002\uffe7\004\uffe7\005\uffe7\006\uffe7" +
    "\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\015\uffe7\016" +
    "\uffe7\017\044\020\051\021\043\022\045\023\040\024\054" +
    "\025\046\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033" +
    "\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\042\uffe7" +
    "\043\047\044\uffe7\046\uffe7\047\uffe7\050\uffe7\051\uffe7\052" +
    "\uffe7\053\uffe7\001\002\000\120\002\uffe6\004\uffe6\005\uffe6" +
    "\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\015" +
    "\uffe6\016\uffe6\017\044\020\051\021\043\022\045\023\040" +
    "\024\054\025\046\026\041\027\056\030\uffe6\031\uffe6\032" +
    "\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040\042" +
    "\042\uffe6\043\047\044\uffe6\045\053\046\uffe6\047\uffe6\050" +
    "\uffe6\051\050\052\uffe6\053\uffe6\001\002\000\112\002\ufff3" +
    "\004\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3\012" +
    "\ufff3\013\ufff3\015\ufff3\016\ufff3\022\045\023\040\024\054" +
    "\025\046\026\ufff3\027\ufff3\030\ufff3\031\ufff3\032\ufff3\033" +
    "\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3\040\ufff3\042\ufff3" +
    "\043\047\044\ufff3\045\ufff3\046\ufff3\047\ufff3\050\ufff3\051" +
    "\ufff3\052\ufff3\053\ufff3\001\002\000\120\002\uffe3\004\uffe3" +
    "\005\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3\013" +
    "\uffe3\015\uffe3\016\uffe3\017\044\020\051\021\043\022\045" +
    "\023\040\024\054\025\046\026\041\027\056\030\uffe3\031" +
    "\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3" +
    "\040\042\042\uffe3\043\047\044\uffe3\045\053\046\uffe3\047" +
    "\uffe3\050\uffe3\051\050\052\uffe3\053\uffe3\001\002\000\120" +
    "\002\uffe9\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011" +
    "\uffe9\012\uffe9\013\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9" +
    "\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027" +
    "\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9" +
    "\036\uffe9\037\uffe9\040\uffe9\042\uffe9\043\uffe9\044\uffe9\045" +
    "\uffe9\046\uffe9\047\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9" +
    "\001\002\000\120\002\uffff\004\uffff\005\uffff\006\uffff\007" +
    "\uffff\010\uffff\011\uffff\012\uffff\013\uffff\015\067\016\uffff" +
    "\017\uffff\020\uffff\021\uffff\022\uffff\023\uffff\024\uffff\025" +
    "\uffff\026\uffff\027\uffff\030\uffff\031\uffff\032\uffff\033\uffff" +
    "\034\uffff\035\uffff\036\uffff\037\uffff\040\uffff\042\uffff\043" +
    "\uffff\044\uffff\045\uffff\046\uffff\047\uffff\050\uffff\051\uffff" +
    "\052\uffff\053\uffff\001\002\000\042\004\014\005\021\006" +
    "\005\007\010\010\012\011\022\012\007\015\020\016\uffd3" +
    "\030\016\031\011\034\015\036\017\044\006\046\004\052" +
    "\023\001\002\000\004\016\073\001\002\000\076\004\014" +
    "\005\021\006\005\007\010\010\012\011\022\012\007\015" +
    "\020\016\uffd3\017\044\020\051\021\043\022\045\023\040" +
    "\024\054\025\046\026\041\027\056\030\016\031\011\034" +
    "\015\036\017\040\042\043\047\044\006\045\053\046\004" +
    "\050\052\051\050\052\023\001\002\000\004\016\uffd4\001" +
    "\002\000\120\002\uffe2\004\uffe2\005\uffe2\006\uffe2\007\uffe2" +
    "\010\uffe2\011\uffe2\012\uffe2\013\uffe2\015\uffe2\016\uffe2\017" +
    "\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2" +
    "\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034" +
    "\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\042\uffe2\043\uffe2" +
    "\044\uffe2\045\uffe2\046\uffe2\047\uffe2\050\uffe2\051\uffe2\052" +
    "\uffe2\053\uffe2\001\002\000\120\002\ufff8\004\ufff8\005\ufff8" +
    "\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8\015" +
    "\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8" +
    "\024\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8\032" +
    "\ufff8\033\ufff8\034\ufff8\035\ufff8\036\ufff8\037\ufff8\040\ufff8" +
    "\042\ufff8\043\047\044\ufff8\045\ufff8\046\ufff8\047\ufff8\050" +
    "\ufff8\051\ufff8\052\ufff8\053\ufff8\001\002\000\120\002\ufffb" +
    "\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012" +
    "\ufffb\013\ufffb\015\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb" +
    "\022\ufffb\023\ufffb\024\054\025\046\026\ufffb\027\ufffb\030" +
    "\ufffb\031\ufffb\032\ufffb\033\ufffb\034\ufffb\035\ufffb\036\ufffb" +
    "\037\ufffb\040\ufffb\042\ufffb\043\047\044\ufffb\045\ufffb\046" +
    "\ufffb\047\ufffb\050\ufffb\051\ufffb\052\ufffb\053\ufffb\001\002" +
    "\000\112\002\ufff2\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010" +
    "\ufff2\011\ufff2\012\ufff2\013\ufff2\015\ufff2\016\ufff2\022\045" +
    "\023\040\024\054\025\046\026\ufff2\027\ufff2\030\ufff2\031" +
    "\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2" +
    "\040\ufff2\042\ufff2\043\047\044\ufff2\045\ufff2\046\ufff2\047" +
    "\ufff2\050\ufff2\051\ufff2\052\ufff2\053\ufff2\001\002\000\112" +
    "\002\ufff4\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011" +
    "\ufff4\012\ufff4\013\ufff4\015\ufff4\016\ufff4\022\045\023\040" +
    "\024\054\025\046\026\ufff4\027\ufff4\030\ufff4\031\ufff4\032" +
    "\ufff4\033\ufff4\034\ufff4\035\ufff4\036\ufff4\037\ufff4\040\ufff4" +
    "\042\ufff4\043\047\044\ufff4\045\ufff4\046\ufff4\047\ufff4\050" +
    "\ufff4\051\ufff4\052\ufff4\053\ufff4\001\002\000\120\002\uffea" +
    "\004\uffea\005\uffea\006\uffea\007\uffea\010\uffea\011\uffea\012" +
    "\uffea\013\uffea\015\uffea\016\uffea\017\044\020\051\021\043" +
    "\022\045\023\040\024\054\025\046\026\041\027\056\030" +
    "\uffea\031\uffea\032\uffea\033\uffea\034\uffea\035\uffea\036\uffea" +
    "\037\uffea\040\042\042\uffea\043\047\044\uffea\045\053\046" +
    "\uffea\047\uffea\050\uffea\051\uffea\052\uffea\053\uffea\001\002" +
    "\000\120\002\ufff7\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010" +
    "\ufff7\011\ufff7\012\ufff7\013\ufff7\015\ufff7\016\ufff7\017\044" +
    "\020\051\021\043\022\045\023\040\024\054\025\046\026" +
    "\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7" +
    "\035\ufff7\036\ufff7\037\ufff7\040\ufff7\042\ufff7\043\047\044" +
    "\ufff7\045\053\046\ufff7\047\ufff7\050\ufff7\051\ufff7\052\ufff7" +
    "\053\ufff7\001\002\000\120\002\ufffa\004\ufffa\005\ufffa\006" +
    "\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\013\ufffa\015\ufffa" +
    "\016\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa\024" +
    "\054\025\046\026\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa" +
    "\033\ufffa\034\ufffa\035\ufffa\036\ufffa\037\ufffa\040\ufffa\042" +
    "\ufffa\043\047\044\ufffa\045\ufffa\046\ufffa\047\ufffa\050\ufffa" +
    "\051\ufffa\052\ufffa\053\ufffa\001\002\000\006\014\uffd7\016" +
    "\uffd7\001\002\000\120\002\uffe1\004\uffe1\005\uffe1\006\uffe1" +
    "\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1\015\uffe1\016" +
    "\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1" +
    "\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033" +
    "\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\042\uffe1" +
    "\043\uffe1\044\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1\051" +
    "\uffe1\052\uffe1\053\uffe1\001\002\000\042\013\uffde\017\044" +
    "\020\051\021\043\022\045\023\040\024\054\025\046\026" +
    "\041\027\056\040\042\043\047\045\053\050\052\051\050" +
    "\053\026\001\002\000\004\013\107\001\002\000\120\002" +
    "\uffe0\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0" +
    "\012\uffe0\013\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021" +
    "\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0" +
    "\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036" +
    "\uffe0\037\uffe0\040\uffe0\042\uffe0\043\uffe0\044\uffe0\045\uffe0" +
    "\046\uffe0\047\uffe0\050\uffe0\051\uffe0\052\uffe0\053\uffe0\001" +
    "\002\000\004\004\111\001\002\000\006\004\033\014\uffd6" +
    "\001\002\000\004\014\113\001\002\000\040\004\014\005" +
    "\021\006\005\007\010\010\012\011\022\012\007\015\020" +
    "\030\016\031\011\034\015\036\017\044\006\046\004\052" +
    "\023\001\002\000\040\013\115\017\044\020\051\021\043" +
    "\022\045\023\040\024\054\025\046\026\041\027\056\040" +
    "\042\043\047\045\053\050\052\051\050\001\002\000\120" +
    "\002\uffee\004\uffee\005\uffee\006\uffee\007\uffee\010\uffee\011" +
    "\uffee\012\uffee\013\uffee\015\uffee\016\uffee\017\uffee\020\uffee" +
    "\021\uffee\022\uffee\023\uffee\024\uffee\025\uffee\026\uffee\027" +
    "\uffee\030\uffee\031\uffee\032\uffee\033\uffee\034\uffee\035\uffee" +
    "\036\uffee\037\uffee\040\uffee\042\uffee\043\uffee\044\uffee\045" +
    "\uffee\046\uffee\047\uffee\050\uffee\051\uffee\052\uffee\053\uffee" +
    "\001\002\000\004\014\uffd8\001\002\000\076\004\014\005" +
    "\021\006\005\007\010\010\012\011\022\012\007\015\020" +
    "\016\120\017\044\020\051\021\043\022\045\023\040\024" +
    "\054\025\046\026\041\027\056\030\016\031\011\034\015" +
    "\036\017\040\042\043\047\044\006\045\053\046\004\050" +
    "\052\051\050\052\023\001\002\000\120\002\uffed\004\uffed" +
    "\005\uffed\006\uffed\007\uffed\010\uffed\011\uffed\012\uffed\013" +
    "\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed\022\uffed" +
    "\023\uffed\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed\031" +
    "\uffed\032\uffed\033\uffed\034\uffed\035\uffed\036\uffed\037\uffed" +
    "\040\uffed\042\uffed\043\uffed\044\uffed\045\uffed\046\uffed\047" +
    "\uffed\050\uffed\051\uffed\052\uffed\053\uffed\001\002\000\076" +
    "\004\014\005\021\006\005\007\010\010\012\011\022\012" +
    "\007\015\020\016\uffd3\017\044\020\051\021\043\022\045" +
    "\023\040\024\054\025\046\026\041\027\056\030\016\031" +
    "\011\034\015\036\017\040\042\043\047\044\006\045\053" +
    "\046\004\050\052\051\050\052\023\001\002\000\004\016" +
    "\123\001\002\000\120\002\uffec\004\uffec\005\uffec\006\uffec" +
    "\007\uffec\010\uffec\011\uffec\012\uffec\013\uffec\015\uffec\016" +
    "\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec" +
    "\025\uffec\026\uffec\027\uffec\030\uffec\031\uffec\032\uffec\033" +
    "\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040\uffec\042\uffec" +
    "\043\uffec\044\uffec\045\uffec\046\uffec\047\uffec\050\uffec\051" +
    "\uffec\052\uffec\053\uffec\001\002\000\004\016\uffd5\001\002" +
    "\000\004\041\130\001\002\000\004\037\127\001\002\000" +
    "\120\002\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb" +
    "\011\uffeb\012\uffeb\013\uffeb\015\uffeb\016\uffeb\017\uffeb\020" +
    "\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb" +
    "\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035" +
    "\uffeb\036\uffeb\037\uffeb\040\uffeb\042\uffeb\043\uffeb\044\uffeb" +
    "\045\uffeb\046\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb\053" +
    "\uffeb\001\002\000\040\004\014\005\021\006\005\007\010" +
    "\010\012\011\022\012\007\015\020\030\016\031\011\034" +
    "\015\036\017\044\006\046\004\052\023\001\002\000\042" +
    "\017\044\020\051\021\043\022\045\023\040\024\054\025" +
    "\046\026\041\027\056\037\uffdb\040\042\042\132\043\047" +
    "\045\053\050\052\051\050\001\002\000\004\005\134\001" +
    "\002\000\004\037\uffda\001\002\000\004\041\135\001\002" +
    "\000\040\004\014\005\021\006\005\007\010\010\012\011" +
    "\022\012\007\015\020\030\016\031\011\034\015\036\017" +
    "\044\006\046\004\052\023\001\002\000\042\017\044\020" +
    "\051\021\043\022\045\023\040\024\054\025\046\026\041" +
    "\027\056\037\uffdb\040\042\042\132\043\047\045\053\050" +
    "\052\051\050\001\002\000\004\037\uffdc\001\002\000\120" +
    "\002\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011" +
    "\ufff5\012\ufff5\013\ufff5\015\ufff5\016\ufff5\017\044\020\051" +
    "\021\043\022\045\023\040\024\054\025\046\026\ufff5\027" +
    "\ufff5\030\ufff5\031\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5" +
    "\036\ufff5\037\ufff5\040\ufff5\042\ufff5\043\047\044\ufff5\045" +
    "\053\046\ufff5\047\ufff5\050\ufff5\051\ufff5\052\ufff5\053\ufff5" +
    "\001\002\000\004\017\152\001\002\000\004\035\147\001" +
    "\002\000\006\004\141\035\uffcf\001\002\000\004\035\uffd1" +
    "\001\002\000\006\004\141\035\uffcf\001\002\000\004\035" +
    "\uffd0\001\002\000\040\004\014\005\021\006\005\007\010" +
    "\010\012\011\022\012\007\015\020\030\016\031\011\034" +
    "\015\036\017\044\006\046\004\052\023\001\002\000\040" +
    "\013\151\017\044\020\051\021\043\022\045\023\040\024" +
    "\054\025\046\026\041\027\056\040\042\043\047\045\053" +
    "\050\052\051\050\001\002\000\120\002\ufff0\004\ufff0\005" +
    "\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0" +
    "\015\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023" +
    "\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0" +
    "\032\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040" +
    "\ufff0\042\ufff0\043\ufff0\044\ufff0\045\ufff0\046\ufff0\047\ufff0" +
    "\050\ufff0\051\ufff0\052\ufff0\053\ufff0\001\002\000\040\004" +
    "\014\005\021\006\005\007\010\010\012\011\022\012\007" +
    "\015\020\030\016\031\011\034\015\036\017\044\006\046" +
    "\004\052\023\001\002\000\042\004\uffd2\017\044\020\051" +
    "\021\043\022\045\023\040\024\054\025\046\026\041\027" +
    "\056\035\uffd2\040\042\043\047\045\053\050\052\051\050" +
    "\001\002\000\040\004\014\005\021\006\005\007\010\010" +
    "\012\011\022\012\007\015\020\030\016\031\011\034\015" +
    "\036\017\044\006\046\004\052\023\001\002\000\120\002" +
    "\uffe4\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4" +
    "\012\uffe4\013\uffe4\015\uffe4\016\uffe4\017\044\020\051\021" +
    "\043\022\045\023\040\024\054\025\046\026\041\027\056" +
    "\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036" +
    "\uffe4\037\uffe4\040\042\042\uffe4\043\047\044\uffe4\045\053" +
    "\046\uffe4\047\uffe4\050\uffe4\051\050\052\uffe4\053\uffe4\001" +
    "\002\000\004\002\000\001\002\000\040\017\044\020\051" +
    "\021\043\022\045\023\040\024\054\025\046\026\041\027" +
    "\056\032\160\040\042\043\047\045\053\050\052\051\050" +
    "\001\002\000\040\004\014\005\021\006\005\007\010\010" +
    "\012\011\022\012\007\015\020\030\016\031\011\034\015" +
    "\036\017\044\006\046\004\052\023\001\002\000\040\017" +
    "\044\020\051\021\043\022\045\023\040\024\054\025\046" +
    "\026\041\027\056\033\162\040\042\043\047\045\053\050" +
    "\052\051\050\001\002\000\040\004\014\005\021\006\005" +
    "\007\010\010\012\011\022\012\007\015\020\030\016\031" +
    "\011\034\015\036\017\044\006\046\004\052\023\001\002" +
    "\000\040\013\164\017\044\020\051\021\043\022\045\023" +
    "\040\024\054\025\046\026\041\027\056\040\042\043\047" +
    "\045\053\050\052\051\050\001\002\000\120\002\ufff1\004" +
    "\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1" +
    "\013\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1\022" +
    "\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1" +
    "\031\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1\037" +
    "\ufff1\040\ufff1\042\ufff1\043\ufff1\044\ufff1\045\ufff1\046\ufff1" +
    "\047\ufff1\050\ufff1\051\ufff1\052\ufff1\053\ufff1\001\002\000" +
    "\004\014\166\001\002\000\040\004\014\005\021\006\005" +
    "\007\010\010\012\011\022\012\007\015\020\030\016\031" +
    "\011\034\015\036\017\044\006\046\004\052\023\001\002" +
    "\000\040\013\170\017\044\020\051\021\043\022\045\023" +
    "\040\024\054\025\046\026\041\027\056\040\042\043\047" +
    "\045\053\050\052\051\050\001\002\000\120\002\uffef\004" +
    "\uffef\005\uffef\006\uffef\007\uffef\010\uffef\011\uffef\012\uffef" +
    "\013\uffef\015\uffef\016\uffef\017\uffef\020\uffef\021\uffef\022" +
    "\uffef\023\uffef\024\uffef\025\uffef\026\uffef\027\uffef\030\uffef" +
    "\031\uffef\032\uffef\033\uffef\034\uffef\035\uffef\036\uffef\037" +
    "\uffef\040\uffef\042\uffef\043\uffef\044\uffef\045\uffef\046\uffef" +
    "\047\uffef\050\uffef\051\uffef\052\uffef\053\uffef\001\002\000" +
    "\116\002\uffe8\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8" +
    "\011\uffe8\012\uffe8\013\uffe8\015\uffe8\016\uffe8\017\044\020" +
    "\051\021\043\022\045\023\040\024\054\025\046\026\uffe8" +
    "\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035" +
    "\uffe8\036\uffe8\037\uffe8\040\uffe8\042\uffe8\043\047\044\uffe8" +
    "\046\uffe8\047\uffe8\050\uffe8\051\uffe8\052\uffe8\053\uffe8\001" +
    "\002\000\040\017\044\020\051\021\043\022\045\023\040" +
    "\024\054\025\046\026\041\027\056\040\042\043\047\045" +
    "\053\047\173\050\052\051\050\001\002\000\040\004\014" +
    "\005\021\006\005\007\010\010\012\011\022\012\007\015" +
    "\020\030\016\031\011\034\015\036\017\044\006\046\004" +
    "\052\023\001\002\000\040\013\175\017\044\020\051\021" +
    "\043\022\045\023\040\024\054\025\046\026\041\027\056" +
    "\040\042\043\047\045\053\050\052\051\050\001\002\000" +
    "\120\002\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5" +
    "\011\uffe5\012\uffe5\013\uffe5\015\uffe5\016\uffe5\017\uffe5\020" +
    "\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5" +
    "\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035" +
    "\uffe5\036\uffe5\037\uffe5\040\uffe5\042\uffe5\043\uffe5\044\uffe5" +
    "\045\uffe5\046\uffe5\047\uffe5\050\uffe5\051\uffe5\052\uffe5\053" +
    "\uffe5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\173\000\004\002\012\001\001\000\004\002\171\001" +
    "\001\000\002\001\001\000\004\002\170\001\001\000\004" +
    "\005\164\001\001\000\002\001\001\000\004\002\156\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\142\012\141\001\001\000\004\002\137\001" +
    "\001\000\004\010\125\001\001\000\004\002\116\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\014\024\015" +
    "\026\001\001\000\004\002\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\014\027\015\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\033\001\001" +
    "\000\004\006\102\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\002\036\001\001\000\002\001\001\000\004" +
    "\002\101\001\001\000\004\002\100\001\001\000\004\002" +
    "\077\001\001\000\004\002\076\001\001\000\004\002\075" +
    "\001\001\000\004\002\074\001\001\000\004\002\073\001" +
    "\001\000\004\002\064\001\001\000\004\002\063\001\001" +
    "\000\004\002\062\001\001\000\004\002\061\001\001\000" +
    "\004\002\060\001\001\000\004\002\057\001\001\000\002" +
    "\001\001\000\004\002\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\002\070\004\067\001\001\000\002\001\001" +
    "\000\006\002\070\004\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\014\105\015\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\111\001\001\000\004\006\115" +
    "\001\001\000\002\001\001\000\004\002\113\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\002\120\003\121\001\001\000\002\001\001\000\006\002" +
    "\070\004\123\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\002\130\001\001\000\004\007\132" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\002\135\001\001\000\004\007\136\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\144\013\143\001\001\000\002" +
    "\001\001\000\006\011\144\013\145\001\001\000\002\001" +
    "\001\000\004\002\147\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\002\152\001\001\000\002\001\001\000" +
    "\004\002\154\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\002\160\001\001\000\002\001" +
    "\001\000\004\002\162\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\002\166\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\002\173\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // letDefinitionList ::= 
            {
              Vector<LetDefinition> RESULT =null;
		 RESULT = new Vector<LetDefinition>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("letDefinitionList",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // letDefinitionList ::= letDefinition letDefinitionList 
            {
              Vector<LetDefinition> RESULT =null;
		int ldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LetDefinition ld = (LetDefinition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ldsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ldsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector<LetDefinition> lds = (Vector<LetDefinition>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 lds.insertElementAt(ld,0); RESULT = lds; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("letDefinitionList",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // notEmptyLetDefinitionList ::= letDefinition letDefinitionList 
            {
              Vector<LetDefinition> RESULT =null;
		int ldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LetDefinition ld = (LetDefinition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ldsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ldsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector<LetDefinition> lds = (Vector<LetDefinition>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 lds.insertElementAt(ld,0); RESULT = lds; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("notEmptyLetDefinitionList",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // letDefinition ::= IDENTIFIER EQUAL expression 
            {
              LetDefinition RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LetDefinition(x,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("letDefinition",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expressionList ::= 
            {
              Vector<Expression> RESULT =null;
		 RESULT = new Vector<Expression>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressionList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expressionList ::= expression expressionList 
            {
              Vector<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector<Expression> es = (Vector<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 es.insertElementAt(e,0); RESULT = es; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressionList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // notEmptyExpressionList ::= expression expressionList 
            {
              Vector<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector<Expression> es = (Vector<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 es.insertElementAt(e,0); RESULT = es; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("notEmptyExpressionList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // identifierList ::= 
            {
              Vector<String> RESULT =null;
		 RESULT = new Vector<String>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifierList",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // identifierList ::= IDENTIFIER identifierList 
            {
              Vector<String> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int isleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector<String> is = (Vector<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 is.insertElementAt(i,0); RESULT = is; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifierList",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // notEmptyIdentifierList ::= IDENTIFIER identifierList 
            {
              Vector<String> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int isleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector<String> is = (Vector<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 is.insertElementAt(i,0); RESULT = is; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("notEmptyIdentifierList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // associationList ::= 
            {
              Vector<Association> RESULT =null;
		 RESULT = new Vector<Association>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("associationList",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // associationList ::= PROPERTY COLON expression associationListRest 
            {
              Vector<Association> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector<Association> as = (Vector<Association>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 as.insertElementAt(new Association(p,e),0); RESULT = as; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("associationList",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // associationListRest ::= 
            {
              Vector<Association> RESULT =null;
		 RESULT = new Vector<Association>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("associationListRest",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // associationListRest ::= COMMA PROPERTY COLON expression associationListRest 
            {
              Vector<Association> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector<Association> as = (Vector<Association>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 as.insertElementAt(new Association(p,e),0); RESULT = as; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("associationListRest",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // method ::= METHOD PROPERTY LPAREN identifierList RPAREN ARROW expression END 
            {
              Association RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int isleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Vector<String> is = (Vector<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 is.insertElementAt("this",0);
	      RESULT = new Association(p,new Fun(is,e)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // methodList ::= 
            {
              Vector RESULT =null;
		 RESULT = new Vector(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // methodList ::= method methodList 
            {
              Vector RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Association m = (Association)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int msleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int msright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector ms = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ms.insertElementAt(m,0); RESULT = ms; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expression ::= CLASS EXTENDS expression methodList END 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int msleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int msright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector ms = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 ms.insertElementAt(new Association("Parent",e),0);
	      RESULT = new Record(ms); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expression ::= CLASS methodList END 
            {
              Expression RESULT =null;
		int msleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int msright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector ms = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Record(ms); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expression ::= expression DOT PROPERTY LPAREN expressionList RPAREN 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector<Expression> args = (Vector<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Vector lds = new Vector();
	      LetDefinition ld = new LetDefinition("obj",e1);
	      lds.insertElementAt(ld,0);
	      args.insertElementAt(new Variable("obj"),0);
	      Vector lookupArgs = new Vector();
	      lookupArgs.insertElementAt(new Variable("obj"),0);
	      lookupArgs.insertElementAt(new PropertyConstant(p),1);
	      Expression lookupResult = new LookupApplication(
			new Variable("lookup"),
				     lookupArgs);
	      Expression body = new Application(lookupResult,args);
              RESULT = new Let(lds,body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expression ::= expression ASSIGN expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if (e1 instanceof Variable) {
	         RESULT = new Assignment(((Variable) e1).varname,e2); 
              } else {
		 if ((e1 instanceof BinaryPrimitiveApplication)
                     && ((BinaryPrimitiveApplication) e1).operator.equals(".")) {
	         RESULT = new RecordAssignment(
				((BinaryPrimitiveApplication) e1).argument1,
				((BinaryPrimitiveApplication) e1).argument2,
				e2);
		 } else System.out.println("parse error before :=");
              };
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expression ::= IDENTIFIER ASSIGN expression 
            {
              Expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Assignment(x,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expression ::= WHILE expression DO expression END 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new While(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expression ::= expression SEMICOLON expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sequence(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expression ::= expression HASPROPERTY expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryPrimitiveApplication("hasproperty",e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expression ::= EMPTY expression 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryPrimitiveApplication("empty",e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expression ::= expression DOT expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryPrimitiveApplication(".",e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expression ::= expression PAIR expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
	      Vector<Association> as = new Vector<Association>();
	      as.insertElementAt(new Association("Second",e2),0);
	      as.insertElementAt(new Association("First",e1),0);
	      RESULT = new Record(as); 
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expression ::= LBRACKET associationList RBRACKET 
            {
              Expression RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector<Association> as = (Vector<Association>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Record(as); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expression ::= LPAREN expression notEmptyExpressionList RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector<Expression> es = (Vector<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Application(e,es); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expression ::= LPAREN expression RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expression ::= RECFUN IDENTIFIER notEmptyIdentifierList ARROW expression END 
            {
              Expression RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int xsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Vector<String> xs = (Vector<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RecFun(f,xs,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expression ::= FUN notEmptyIdentifierList ARROW expression END 
            {
              Expression RESULT =null;
		int xsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Vector<String> xs = (Vector<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Fun(xs,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expression ::= LET notEmptyLetDefinitionList IN expression END 
            {
              Expression RESULT =null;
		int ldsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ldsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Vector<LetDefinition> lds = (Vector<LetDefinition>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Let(lds,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expression ::= IF expression THEN expression ELSE expression END 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e3 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(e1,e2,e3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expression ::= expression EQUAL expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryPrimitiveApplication("=",e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expression ::= expression LESS expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryPrimitiveApplication("<",e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expression ::= expression GREATER expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryPrimitiveApplication(">",e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expression ::= NEG expression 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryPrimitiveApplication("\\",e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expression ::= expression OR expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryPrimitiveApplication("|",e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expression ::= expression AND expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryPrimitiveApplication("&",e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expression ::= expression DIV expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryPrimitiveApplication("/",e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expression ::= expression TIMES expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryPrimitiveApplication("*",e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expression ::= expression MINUS expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryPrimitiveApplication("-",e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expression ::= expression PLUS expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryPrimitiveApplication("+",e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expression ::= FALSE 
            {
              Expression RESULT =null;
		 RESULT = new BoolConstant(false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expression ::= TRUE 
            {
              Expression RESULT =null;
		 RESULT = new BoolConstant(true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expression ::= INTEGER 
            {
              Expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntConstant(x.intValue()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expression ::= PROPERTY 
            {
              Expression RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PropertyConstant(p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= expression EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression start_val = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // expression ::= IDENTIFIER 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Variable(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

